{
  "name": "Pydiary",
  "tagline": "Web application for keeping personal diary and self-improvement written with Flask and SQLAlchemy.",
  "body": "Overview\r\n-------\r\n\r\nPydiary is written in Python 3 and based on web microframework [Flask](http://flask.pocoo.org/). \r\nDemo of the application is available on: <https://pydiary.herokuapp.com/>.\r\n\r\nComplete installation instructions can be found in a readme file inside the repository <https://github.com/roxel/pydiary> or in the bottom of this page. Installation is very quick and simple and requires only: Python 3 (any stable version), pip install tool and Postgres database.\r\n\r\nFeatures\r\n-------\r\n\r\nFlask is a microframework and so it provides only skeleton of the application. All other features are implemented through packages and plugins.\r\n\r\n#### Authentication and authorization\r\nApplication supports logging in and out, registering and saving session data in cookies\r\n\r\n#### Database\r\nAll data is stored in PostgreSQL database accessed using SQLAlchemy ORM (it is Python specific but not Flask specific solution).\r\n\r\n#### Password security\r\nAll passwords are stored in database in an enrypted form using bcrypt algorithm for 12 iterations. This way password are very safe and not vulnerable to rainbow tables nor brute force attacks. Website is also less vulnerable to CSRF attacks thanks to using CSRF tokens for all of forms.\r\n\r\n#### Web server \r\nApplication uses production Web Server for Python: Gunicorn used for many medium size apps and large ones like: corel.com, ubuntu.com or idealist.org.\r\n\r\n#### Migrations\r\nDatabase migrations are performed using Alembic for SQLAlchemy.\r\n\r\n#### Tests\r\nBasic tests are provided with the application code. Some of them are manual api tests in Bash but some are automated using Python unittest library. Load testing was performed using Locust tool.\r\n\r\nUser functionality\r\n-------\r\n\r\nUsers can:\r\n\r\n* Register and login to the site\r\n* View, add and edit their diary posts using Markdown – diary is basic tool for self-improvement as it tracks our progress in developping certain behaviors.\r\n* Read virtue descriptions – to treat them us objectives to accomplish.\r\n* View, add and edit tasks\r\n* Use planner to have a complete overview of tasks and diary for any chosen date.\r\n\r\n\r\nInstallation\r\n-------\r\nUsing virtualenv is recommended. To setup application locally:\r\n\r\n```shell\r\ngit clone https://github.com/roxel/pydiary.git\r\npip install virtualenv\r\nvirtualenv venv\r\nsource venv/bin/activate\r\n```    \r\n\r\nTo install required flask extensions simply run:\r\n\r\n    $ pip install -r requirements.txt\r\n    \r\nApplication uses Flask-Migrate (based on Alembic) to manage database migrations. \r\nItself it does not create any database or tables. \r\n\r\nYou must manually create database and user or overwrite configuration.\r\nIf you have postgres already installed run:\r\n\r\n    $ psql --username=postgres\r\n    $ postgres=# CREATE DATABASE pydiary;\r\n\r\nTo create needed tables you can use following command to let Flask-Migrate do it for you:\r\n\r\n    $ python manage.py db upgrade\r\n    \r\nTo start application:\r\n\r\n    $ python run.py\r\n    \r\nThe application will be available on `http://127.0.0.1:8080/`.\r\nYou can use different port by setting environment variable `PYDIARY_PORT`, e.g.:\r\n\r\n    $ export PYDIARY_PORT=8333\r\n\r\nTesting\r\n-------\r\n\r\nAll tests are located inside `/test` directory and can be run by:\r\n\r\n    $ python -m unittest discover\r\n    \r\nRemember to install all extensions first. There is no need to create database prior to testing as it is created in TestCase create_app method. \r\n\r\nAuthors\r\n-------\r\n\r\n* Piotr Roksela\r\n* Hubert Zajma",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}